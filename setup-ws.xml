<?xml version="1.0" encoding="UTF-8"?>
<project name="project" default="default">  
<taskdef name="groovy"
         classname="org.codehaus.groovy.ant.Groovy"
         classpath="groovy-all-2.4.17.jar" />  
<target name="default">
    <groovy>
		import java.io.*;
		import java.util.*;
		import java.util.regex.*;
		import java.time.LocalDateTime;

		import org.eclipse.core.resources.*;
		import org.eclipse.core.runtime.*;
		import org.eclipse.core.runtime.jobs.*;
		import org.eclipse.equinox.app.*;
		import org.osgi.framework.*;

		import static groovy.io.FileType.*
 
        bundle = org.eclipse.core.runtime.Platform.getBundle("org.eclipse.core.resources");
        resPlugin = bundle.loadClass("org.eclipse.core.resources.ResourcesPlugin");
        workspace = resPlugin.getWorkspace();
        
        println "*** " + LocalDateTime.now().toString() + " Import projects into workspace ***";
        
        def groovySrcDir = new File(project.properties."idempiere");
        
		groovySrcDir.eachFile {
            fullPath = it.getAbsolutePath();			
			if (fullPath.endsWith("org.idempiere.javadoc") || fullPath.endsWith("ztl") || fullPath.endsWith("selenese") 
				|| fullPath.endsWith("doc") || fullPath.endsWith("fitnesse") || fullPath.endsWith("migration")
				|| fullPath.endsWith("event.test") || fullPath.endsWith("org.adempiere.report.jasper.fragment.test") 
				|| fullPath.endsWith("utils_dev") || fullPath.endsWith("db")
				|| fullPath.endsWith("org.adempiere.ui.zk.example")
				|| fullPath.endsWith("org.idempiere.webservices.client-feature") || fullPath.endsWith("org.idempiere.webservice.client"))
				return;
				
			projectFile = new File(it, ".project");
			if (!projectFile.exists()) return;
			
			projectDescription = workspace.loadProjectDescription(new Path(projectFile.getAbsolutePath()));
			println(projectDescription.getName());
			project = workspace.getRoot().getProject(projectDescription.getName());
			if (project.isOpen() == false) {
				project.create(projectDescription, null);
				project.open(null);
			} else {
				project.refreshLocal(IResource.DEPTH_INFINITE, null);
			}
		}
		
		def estimatedTotal = 0;
		def workedTotal = 0;
		def monitor = [beginTask: {String name, Integer totalWork -> println name; estimatedTotal = totalWork;},
				 done: {-> println "done"}, internalWorked: {Double work -> println "..."},
				 isCanceled: {-> return false}, setCanceled: {Boolean value -> println "setCanceled: " + value},
				 setTaskName: {String name -> println "Task: " + name}, subTask: {String name -> println "Sub task: " + name},
				 worked: {Integer work -> workedTotal += work; println "Progress: " + workedTotal + " of " + estimatedTotal},
				 setBlocked: {IStatus reason -> println "Blocked: " + reason},
				 clearBlocked: {-> println "clear blocked"}];
				 
		workspace.save(true, monitor as IProgressMonitor);
    </groovy>
</target>
</project>
